name: Node.js CI

on:
  push:
    branches: [ master ]
  pull_request:

env:
  SECRETS_MANAGER_AWS_ACCESS_KEY_ID: ${{ secrets.SECRETS_MANAGER_AWS_ACCESS_KEY_ID }}
  SECRETS_MANAGER_AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRETS_MANAGER_AWS_SECRET_ACCESS_KEY }}
  SECRETS_MANAGER_KEY: ${{ secrets.SECRETS_MANAGER_KEY_PRD }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install convert-json-env
      run: |
        npm install --global convert-json-env

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.SECRETS_MANAGER_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.SECRETS_MANAGER_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Read deploy secrets from AWS Secrets Manager into environment variables
      run: |
        aws secretsmanager get-secret-value --secret-id ${{ env.SECRETS_MANAGER_KEY }} --query SecretString --output text > secrets.json
        convert-json-env secrets.json --out=.env.deploy
        rm -rf secrets.json

        sed "s/[']//g" .env.deploy >> $GITHUB_ENV
        rm -rf .env.deploy

    - name: Read project secrets from AWS Secrets Manager into environment variables
      run: |
        aws secretsmanager get-secret-value --secret-id /settings/apps/${{ env.ENV }}/${{ github.repository }} --query SecretString --output text > secrets.json
        convert-json-env secrets.json --out=.env.project
        rm -rf secrets.json

        sed "s/[']//g" .env.project >> $GITHUB_ENV
        rm -rf .env.project

    - uses: kciter/aws-ecr-action@master
      with:
        access_key_id: ${{ env.DEPLOY_AWS_ACCESS_KEY_ID }}
        secret_access_key: ${{ env.DEPLOY_AWS_SECRET_ACCESS_KEY }}
        account_id: ${{ env.DEPLOY_AWS_ACCOUNT_ID }}
        repo: ${{ env.ECR_REPOSITORY_NAME }}
        region: ${{ env.DEPLOY_ECR_REGION }}
        tags: latest-${{ env.ENV }},${{ github.sha }}
        create_repo: true

    - name: "set service url"
      run: |
        if [ ${ENV} == "prd" ]
        then
          export SERVICE_URL="${SERVICE_URL}"
        else
          export SERVICE_URL="${ENV}.${SERVICE_URL}"
        fi

    - name: "get cluster ip"
      env:
        CLUSTER_SERVER: ${{ fromJSON(env.KUBE_CONFIG).clusters[0].cluster.server }}
      run: |
        export CLUSTER_IP=$(echo $CLUSTER_SERVER | cut -d'/' -f 3 | cut -d':' -f 1)
        echo "CLUSTER_IP=${CLUSTER_IP}" >> $GITHUB_ENV
        echo $CLUSTER_IP

    - name: "Create an A record set"
      uses: Roosterfish/aws-route53-record-set-action@master
      with:
        aws_access_key_id: ${{ env.DEPLOY_AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ env.DEPLOY_AWS_SECRET_ACCESS_KEY }}
        aws_route53_hosted_zone_id: ${{ env.DEPLOY_AWS_HOSTED_ZONE_ID }}
        aws_route53_rr_action: "UPSERT"
        aws_route53_rr_name: ${{ env.SERVICE_URL }}
        aws_route53_rr_type: "A"
        aws_route53_rr_ttl: "300"
        aws_route53_rr_value: ${{ env.CLUSTER_IP }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v2

    - name: Install convert-json-env
      run: |
        npm install --global convert-json-env

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.SECRETS_MANAGER_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.SECRETS_MANAGER_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Read deploy secrets from AWS Secrets Manager into environment variables
      run: |
        aws secretsmanager get-secret-value --secret-id ${{ env.SECRETS_MANAGER_KEY }} --query SecretString --output text > secrets.json
        convert-json-env secrets.json --out=.env.deploy
        rm -rf secrets.json

        sed "s/[']//g" .env.deploy >> $GITHUB_ENV
        rm -rf .env.deploy

    - name: Read project secrets from AWS Secrets Manager into environment variables
      run: |
        aws secretsmanager get-secret-value --secret-id /settings/apps/${{ env.ENV }}/${{ github.repository }} --query SecretString --output text > secrets.json
        convert-json-env secrets.json --out=.env.project.temp
        rm -rf secrets.json

        sed "s/[']//g" .env.project.temp > .env.project
        cat .env.project >> $GITHUB_ENV

    - name: Read project secrets from AWS Secrets Manager into environment variables
      run: |
        aws secretsmanager get-secret-value --secret-id /settings/apps/${{ env.ENV }}/base --query SecretString --output text > secrets.json
        convert-json-env secrets.json --out=.env.base.temp
        rm -rf secrets.json

        sed "s/[']//g" .env.base.temp > .env.base
        cat .env.base >> .env.project

    - name: Config kubernetes
      uses: Azure/k8s-set-context@v1
      with:
        kubeconfig: ${{ env.KUBE_CONFIG }}

    - name: Prepare env
      run: |
        export IMAGE_REPO_URL=${DEPLOY_AWS_ACCOUNT_ID}.dkr.ecr.${DEPLOY_ECR_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${{ github.sha }}
        export CERT_MANAGER_ISSUE_TEMPORARY_CERTICATE="false"
        export INGRESS_EDIT_IN_PLACE="false"
        echo "IMAGE_REPO_URL=${IMAGE_REPO_URL}" >> $GITHUB_ENV
        echo "CERT_MANAGER_ISSUE_TEMPORARY_CERTICATE=${CERT_MANAGER_ISSUE_TEMPORARY_CERTICATE}" >> $GITHUB_ENV
        echo "INGRESS_EDIT_IN_PLACE=${INGRESS_EDIT_IN_PLACE}" >> $GITHUB_ENV

    - name: create namespace
      run: |
        cat << EOF | kubectl apply -f -
        apiVersion: v1
        kind: Namespace
        metadata:
          name: $K8S_NAMESPACE
        EOF

    - name: Create Secret kubernetes
      run: |
        kubectl create secret generic $SERVICE_NAME \
          --from-env-file=.env.project \
          --save-config \
          --dry-run=client \
          --namespace $K8S_NAMESPACE \
          -o yaml | kubectl apply -f -

        rm -rf .env.project

    - name: Create image pull secrets kubernetes
      run: |
        kubectl delete secret $IMAGE_PULL_SECRET --namespace ${{ env.K8S_NAMESPACE }} --ignore-not-found
        TOKEN=`AWS_SECRET_ACCESS_KEY=$DEPLOY_AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID=$DEPLOY_AWS_ACCESS_KEY_ID aws ecr get-login-password --region ${{ env.DEPLOY_ECR_REGION }}`
        kubectl create secret docker-registry $IMAGE_PULL_SECRET \
          --docker-username AWS \
          --docker-server ${{ env.DEPLOY_AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.DEPLOY_ECR_REGION }}.amazonaws.com \
          --docker-email anymail.doesnt.matter@email.local \
          --docker-password $TOKEN \
          -n ${{ env.K8S_NAMESPACE }}

    - uses: danielr1996/envsubst-action@1.0.0
      with:
        input: .infra/deployment.yaml
        output: .infra/output.yaml

    - name: apply manifests
      run: |
        kubectl apply -f .infra/output.yaml
